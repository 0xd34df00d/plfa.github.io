<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://plfa.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://plfa.github.io/" rel="alternate" type="text/html" /><updated>2020-07-20T16:30:07+00:00</updated><id>https://plfa.github.io/feed.xml</id><title type="html">Programming Language Foundations in Agda</title><subtitle>Programming Language Foundations in Agda
</subtitle><entry><title type="html">Versions and Releases</title><link href="https://plfa.github.io/2020/07/14/versions-and-releases.html" rel="alternate" type="text/html" title="Versions and Releases" /><published>2020-07-14T00:00:00+00:00</published><updated>2020-07-14T00:00:00+00:00</updated><id>https://plfa.github.io/2020/07/14/versions-and-releases</id><content type="html" xml:base="https://plfa.github.io/2020/07/14/versions-and-releases.html">&lt;p&gt;We’re adding stable releases to PLFA, which you can find &lt;a href=&quot;https://github.com/plfa/plfa.github.io/releases&quot;&gt;on GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For the past two years, we’ve tried to do major revisions of the book during winter break and early summer, to ensure that the text remains consistent throughout the teaching period… Inevitably, we fixed bugs, and make small changes here and there, perhaps resulting in a less-than-consistent experience.&lt;/p&gt;

&lt;p&gt;Starting today, you can be sure that PLFA will remain consistent, since we’re adding stable releases! You can find the releases &lt;a href=&quot;https://github.com/plfa/plfa.github.io/releases&quot;&gt;on GitHub&lt;/a&gt;, and as tags in the Git repository. The releases are numbered using &lt;a href=&quot;https://calver.org/&quot;&gt;calendar versioning&lt;/a&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YY.0M&lt;/code&gt; format, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20.07&lt;/code&gt; was released in July 2020. Each release will have two associated tags.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plfa/plfa.github.io/releases/tag/dev-20.07&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev-20.07&lt;/code&gt;&lt;/a&gt; is a copy of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; branch, and contains everything you need to work with PLFA;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plfa/plfa.github.io/releases/tag/web-20.07&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web-20.07&lt;/code&gt;&lt;/a&gt; is a copy of the web site &lt;em&gt;only&lt;/em&gt;, and does not contain Agda sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web-YY.0M&lt;/code&gt; releases are useful if you’d like to host a copy of PLFA, but you don’t have all the required dependencies installed. However, if you’d like to view a particular release only, we have you covered! If you’d like to browse PLFA version 20.07, just go to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://plfa.github.io/20.07/&quot;&gt;https://plfa.github.io/20.07/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, we have the &lt;a href=&quot;https://plfa.github.io/20.07/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20.07&lt;/code&gt;&lt;/a&gt; release, made just before the recent changes, and the &lt;a href=&quot;https://plfa.github.io/19.08/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19.08&lt;/code&gt;&lt;/a&gt; release, the stable release for the past academic year. We’re expecting to release &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20.08&lt;/code&gt; next month, to provide a stable release for the upcoming academic year, which will include support for the latest version of Agda.&lt;/p&gt;</content><author><name></name></author><summary type="html">We’re adding stable releases to PLFA, which you can find on GitHub!</summary></entry><entry><title type="html">Introducing Part 3: Denotational Semantics</title><link href="https://plfa.github.io/2020/07/13/denotational-semantics.html" rel="alternate" type="text/html" title="Introducing Part 3: Denotational Semantics" /><published>2020-07-13T00:00:00+00:00</published><updated>2020-07-13T00:00:00+00:00</updated><id>https://plfa.github.io/2020/07/13/denotational-semantics</id><content type="html" xml:base="https://plfa.github.io/2020/07/13/denotational-semantics.html">&lt;p&gt;We’re pleased to announce an entirely new part of the book, contributed by Jeremy G. Siek! You may have noticed his name appearing on the list of authors some months ago, or the chapters that make up Part 3 slowly making their appearance. Well, that’s all Jeremy’s work!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Part 3 introduces denotational semantics, presenting the denotational semantics of the untyped lambda calculus. Our development is unusual in that emphasizes the use of intersection type systems as denotational models instead of the more traditional domain theory, but this choice allows us to build upon the simple type systems studied in Part 2.
Part 3 also proves the basic properties of the denotational semantics using techniques and variations of the techniques introduced in Part 2. We prove the &lt;em&gt;soundness&lt;/em&gt; of reduction with respect to the denotational semantics by showing that reduction preserves and reflects denotations. We prove &lt;em&gt;adequacy&lt;/em&gt; of the denotational semantics using a logical-relations style proof with respect to a big-step semantics of the untyped calculus. Finally, with these results in hand, we prove a standardisation theorem, that reduction to weak-head normal form implies the termination of call-by-name evaluation.&lt;/p&gt;

&lt;p&gt;To better prepare the reader for Part 3, we made some changes and updates to Part 2. We’ve changed the reduction semantics for the untyped lambda calculus to be the standard one, with unconstrained beta reduction. We also added two new chapters to Part 2. The first proves confluence—a.k.a. the Church-Rosser property—for the untyped lambda calculus. The second presents big-step semantics for call-by-name evaluation, and proves that call-by-name termination implies the reduction to weak-head normal form.&lt;/p&gt;

&lt;p&gt;Finally, we also include an Appendix with a single chapter, which proves the substitution lemma for the untyped lambda calculus. We opted to place this chapter an Appendix, and not in Part 2, because we already discuss substitution for the simply-typed lambda calculus, and we feel it would not be particularly enlightening for students to work through the proofs, especially since the ratio of insight to lines of code is rather low.&lt;/p&gt;</content><author><name></name></author><summary type="html">We’re pleased to announce an entirely new part of the book, contributed by Jeremy G. Siek! You may have noticed his name appearing on the list of authors some months ago, or the chapters that make up Part 3 slowly making their appearance. Well, that’s all Jeremy’s work!</summary></entry><entry><title type="html">Talking about PLFA…</title><link href="https://plfa.github.io/2020/06/23/talking-about-plfa.html" rel="alternate" type="text/html" title="Talking about PLFA…" /><published>2020-06-23T00:00:00+00:00</published><updated>2020-06-23T00:00:00+00:00</updated><id>https://plfa.github.io/2020/06/23/talking-about-plfa</id><content type="html" xml:base="https://plfa.github.io/2020/06/23/talking-about-plfa.html">&lt;p&gt;We published a paper about PLFA at the &lt;a href=&quot;https://homepages.inf.ed.ac.uk/wadler/topics/agda.html#sbmf&quot;&gt;Brazilian Symposium on Formal Methods&lt;/a&gt; and in the &lt;a href=&quot;https://homepages.inf.ed.ac.uk/wadler/topics/agda.html#scp&quot;&gt;Science of Computer Programming&lt;/a&gt; (extended version). In them, we describe our experiences writing the book, and compare it to &lt;a href=&quot;https://softwarefoundations.cis.upenn.edu/&quot;&gt;Software Foundations&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name></name></author><summary type="html">We published a paper about PLFA at the Brazilian Symposium on Formal Methods and in the Science of Computer Programming (extended version). In them, we describe our experiences writing the book, and compare it to Software Foundations.</summary></entry><entry><title type="html">PLFA as EPUB</title><link href="https://plfa.github.io/2020/06/02/plfa-as-epub.html" rel="alternate" type="text/html" title="PLFA as EPUB" /><published>2020-06-02T00:00:00+00:00</published><updated>2020-06-02T00:00:00+00:00</updated><id>https://plfa.github.io/2020/06/02/plfa-as-epub</id><content type="html" xml:base="https://plfa.github.io/2020/06/02/plfa-as-epub.html">&lt;p&gt;It has been just over a year and a half since this feature was first requested in &lt;a href=&quot;https://github.com/plfa/plfa.github.io/issues/112&quot;&gt;#112&lt;/a&gt;… Thanks to hard work by &lt;a href=&quot;https://github.com/mreed20&quot;&gt;Michael Reed&lt;/a&gt;, and a little elbow grease on our part, it is finally here! &lt;a href=&quot;https://plfa.github.io/out/epub/plfa.epub&quot;&gt;An EPUB version of PLFA!&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;</content><author><name></name></author><summary type="html">It has been just over a year and a half since this feature was first requested in #112… Thanks to hard work by Michael Reed, and a little elbow grease on our part, it is finally here! An EPUB version of PLFA!</summary></entry><entry><title type="html">Praise for PLFA</title><link href="https://plfa.github.io/2020/04/30/praise-for-plfa.html" rel="alternate" type="text/html" title="Praise for PLFA" /><published>2020-04-30T00:00:00+00:00</published><updated>2020-04-30T00:00:00+00:00</updated><id>https://plfa.github.io/2020/04/30/praise-for-plfa</id><content type="html" xml:base="https://plfa.github.io/2020/04/30/praise-for-plfa.html">&lt;p&gt;&lt;a href=&quot;https://plfa.github.io/20.07/TSPL/2019/&quot;&gt;&lt;em&gt;Types and Semantics for Programming Languages&lt;/em&gt;&lt;/a&gt;, the course we teach in Edinburgh, was shortlisted as an Outstanding Course by the &lt;a href=&quot;https://www.eusa.ed.ac.uk/representation/campaigns/teachingawards2020/&quot;&gt;Edinburgh University Student Association&lt;/a&gt; (Runner Up)!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Types and Semantics for Programming Languages was the single best course I took throughout my time at the University of Edinburgh. Philip Wadler clearly poured his heart into teaching it, including writing a whole textbook including exercises specifically for the course.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“One of the most inspiring courses. Philip designed a course that is both very theoretical and very practical.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;</content><author><name></name></author><summary type="html">Types and Semantics for Programming Languages, the course we teach in Edinburgh, was shortlisted as an Outstanding Course by the Edinburgh University Student Association (Runner Up)! “Types and Semantics for Programming Languages was the single best course I took throughout my time at the University of Edinburgh. Philip Wadler clearly poured his heart into teaching it, including writing a whole textbook including exercises specifically for the course.” “One of the most inspiring courses. Philip designed a course that is both very theoretical and very practical.”</summary></entry><entry><title type="html">PLFA as a Notebook</title><link href="https://plfa.github.io/2020/01/10/plfa-as-a-notebook.html" rel="alternate" type="text/html" title="PLFA as a Notebook" /><published>2020-01-10T00:00:00+00:00</published><updated>2020-01-10T00:00:00+00:00</updated><id>https://plfa.github.io/2020/01/10/plfa-as-a-notebook</id><content type="html" xml:base="https://plfa.github.io/2020/01/10/plfa-as-a-notebook.html">&lt;p&gt;NextJournal has created &lt;a href=&quot;https://nextjournal.com/plfa/ToC&quot;&gt;a notebook version of PLFA&lt;/a&gt;, which lets you edit and run the code samples from the book online! The notebook is based on &lt;a href=&quot;https://plfa.github.io/19.08/&quot;&gt;PLFA version 19.08&lt;/a&gt;, with some minor changes to adapt the contents to NextJournal.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name></name></author><summary type="html">NextJournal has created a notebook version of PLFA, which lets you edit and run the code samples from the book online! The notebook is based on PLFA version 19.08, with some minor changes to adapt the contents to NextJournal.</summary></entry><entry><title type="html">Migration to Agda 2.6.0.1</title><link href="https://plfa.github.io/2019/07/12/migration-to-2.6.0.1.html" rel="alternate" type="text/html" title="Migration to Agda 2.6.0.1" /><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><id>https://plfa.github.io/2019/07/12/migration-to-2.6.0.1</id><content type="html" xml:base="https://plfa.github.io/2019/07/12/migration-to-2.6.0.1.html">&lt;p&gt;We upgraded to &lt;a href=&quot;https://github.com/agda/agda/releases/tag/v2.6.0.1&quot;&gt;Agda 2.6.0.1&lt;/a&gt; and &lt;a href=&quot;https://github.com/agda/agda-stdlib/releases/tag/v1.1&quot;&gt;version 1.1 of the standard library&lt;/a&gt;. If you want to continue working with the book, you’ll have to update your versions locally. Please follow the instructions in &lt;a href=&quot;/GettingStarted/&quot;&gt;Getting Started&lt;/a&gt; to reinstall Agda and the standard library.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For this upgrade, we made several major changes to the PLFA infrastructure.&lt;/p&gt;

&lt;p&gt;We deprecated &lt;a href=&quot;https://github.com/wenkokke/agda2html&quot;&gt;agda2html&lt;/a&gt;. In version 2.6, Agda has added support for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--html-highlight&lt;/code&gt; flag. Using this command, Agda will highlight only the code in a file, and leave the rest untouched:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;agda &lt;span class=&quot;nt&quot;&gt;--html&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--html-highlight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;code FILE.lagda.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Of course, &lt;a href=&quot;https://github.com/wenkokke/agda2html&quot;&gt;agda2html&lt;/a&gt; offered support for more than just inline highlighting of code in Markdown files. We have written a bash script, &lt;a href=&quot;https://github.com/plfa/plfa.github.io/blob/dev/highlight.sh&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highlight.sh&lt;/code&gt;&lt;/a&gt;, which supports much of the same functionality. In particular, it uses sed to redirect links to the standard library to &lt;a href=&quot;https://agda.github.io/agda-stdlib/README.html&quot;&gt;the online version&lt;/a&gt;. For the time being, we dropped support for module references, e.g., linking to the chapter on Naturals by writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Naturals][plfa.Naturals]&lt;/code&gt;, and removed all module references from the text.&lt;/p&gt;

&lt;p&gt;Lastly, to use Agda 2.6 with Markdown, we updated all literal Agda files. We replaced LaTeX code fences, i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\begin{code}&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\end{code}&lt;/code&gt;, with Markdown backtick fences &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;```&lt;/code&gt;, and changed the file extensions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.lagda&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.lagda.md&lt;/code&gt;. As a consequence, when you open up a literate Agda file in Emacs, it will open the file in Markdown mode – if you have it installed – or in fundamental mode. To switch to Agda mode, you will have to invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-x agda2-mode&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">We upgraded to Agda 2.6.0.1 and version 1.1 of the standard library. If you want to continue working with the book, you’ll have to update your versions locally. Please follow the instructions in Getting Started to reinstall Agda and the standard library.</summary></entry></feed>